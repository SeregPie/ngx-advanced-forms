import {FormControl} from '@angular/forms';

import {FormArray} from './form-array';

xdescribe('FormArray', () => {
	describe('setControls', () => {
		it('should work', () => {
			// prettier-ignore
			const form = new FormArray([
				new FormControl(0),
			]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			// prettier-ignore
			form.setControls([
				new FormControl(1),
				new FormControl(2),
			]);

			expect(form.value).toEqual([1, 2]);
			expect(spy).toHaveBeenCalledTimes(1);

			spy.calls.reset();

			// prettier-ignore
			form.setControls([
				new FormControl(3),
			]);

			expect(form.value).toEqual([3]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should not trigger if no changes were made', () => {
			const form = new FormArray([
				new FormControl(null),
				new FormControl(null),
			]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.setControls([...form.controls]);

			expect(spy).toHaveBeenCalledTimes(0);
		});
	});

	describe('insertControlLast', () => {
		it('should work', () => {
			//
			const form = new FormArray([new FormControl(1)]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlLast(new FormControl(2));

			expect(form.value).toEqual([1, 2]);
			expect(spy).toHaveBeenCalledTimes(1);
		});
	});

	describe('insertControlsLast', () => {
		it('should work', () => {
			//
			const form = new FormArray([new FormControl(1)]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlsLast([new FormControl(2), new FormControl(3)]);

			expect(form.value).toEqual([1, 2, 3]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should not trigger if no changes were made', () => {
			const form = new FormArray([new FormControl(1)]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlsLast([]);

			expect(spy).toHaveBeenCalledTimes(0);
		});
	});

	describe('insertControlBefore', () => {
		it('should work', () => {
			const form = new FormArray([new FormControl(1), new FormControl(2)]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlBefore(1, new FormControl(3));

			expect(form.value).toEqual([1, 3, 2]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should work with negative index', () => {
			const form = new FormArray([new FormControl(1), new FormControl(2)]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlBefore(-1, new FormControl(3));

			expect(form.value).toEqual([1, 3, 2]);
			expect(spy).toHaveBeenCalledTimes(1);
		});
	});

	describe('insertControlsBefore', () => {
		it('should work', () => {
			const form = new FormArray([new FormControl(1), new FormControl(2)]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlsBefore(1, [new FormControl(3), new FormControl(4)]);

			expect(form.value).toEqual([1, 3, 4, 2]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should work with negative index', () => {
			const form = new FormArray([new FormControl(1), new FormControl(2)]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlsBefore(-1, [new FormControl(3), new FormControl(4)]);

			expect(form.value).toEqual([1, 3, 4, 2]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should not trigger if no changes were made', () => {
			const form = new FormArray([new FormControl(1), new FormControl(2)]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlsBefore(1, []);

			expect(spy).toHaveBeenCalledTimes(0);
		});
	});

	// prettier-ignore
	describe('insertControlAt', () => {
		it('should work', () => {
			const form = new FormArray([
				new FormControl(1),
				new FormControl(2),
				new FormControl(3),
			]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlAt(1, new FormControl(4));

			expect(form.value).toEqual([1, 4, 3]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should work with negative index', () => {
			const form = new FormArray([
				new FormControl(1),
				new FormControl(2),
				new FormControl(3),
			]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlAt(-2, new FormControl(4));

			expect(form.value).toEqual([1, 4, 3]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should not trigger if no changes were made', () => {
			const form = new FormArray([
				new FormControl(1),
				new FormControl(2),
				new FormControl(3),
			]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.insertControlAt(1, form.controls[1]);

			expect(spy).toHaveBeenCalledTimes(0);
		});
	});

	// prettier-ignore
	describe('removeControlAt', () => {
		it('should work', () => {
			const form = new FormArray([
				new FormControl(1),
				new FormControl(2),
				new FormControl(3),
			]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.removeControlAt(1);

			expect(form.value).toEqual([1, 3]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should work with negative index', () => {
			const form = new FormArray([
				new FormControl(1),
				new FormControl(2),
				new FormControl(3),
			]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.removeControlAt(-2);

			expect(form.value).toEqual([1, 3]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should not trigger if no changes were made', () => {
			const form = new FormArray([
				new FormControl(1),
			]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.removeControlAt(1);

			expect(spy).toHaveBeenCalledTimes(0);
		});
	});

	// prettier-ignore
	describe('clearControls', () => {
		it('should work', () => {
			const form = new FormArray([
				new FormControl(null),
				new FormControl(null),
			]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.clearControls();

			expect(form.value).toEqual([]);
			expect(spy).toHaveBeenCalledTimes(1);
		});

		it('should not trigger if no changes were made', () => {
			const form = new FormArray([]);

			const spy = jasmine.createSpy();
			form.valueChanges.subscribe(spy);

			form.clearControls();

			expect(spy).toHaveBeenCalledTimes(0);
		});
	});
});
